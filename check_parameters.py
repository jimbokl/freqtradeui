#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É–∑–ª–æ–≤ –±–µ–∑ GUI
"""

import sys
from pathlib import Path

def check_node_parameters():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ —É–∑–ª–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É–∑–ª–æ–≤ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ...")
    print("=" * 60)
    
    nodes_file = Path("nodes/base_nodes.py")
    if not nodes_file.exists():
        print("‚ùå –§–∞–π–ª nodes/base_nodes.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open(nodes_file, 'r') as f:
        content = f.read()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å—ã —É–∑–ª–æ–≤ –∏ –∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    node_classes = [
        'MarketDataNode',
        'IndicatorNode', 
        'MathNode',
        'LogicNode',
        'EnterNode',
        'ExitNode',
        'HyperoptParamNode',
        'PlotNode'
    ]
    
    all_passed = True
    
    for node_class in node_classes:
        # –ù–∞—Ö–æ–¥–∏–º –∫–ª–∞—Å—Å –≤ –∫–æ–¥–µ
        class_start = content.find(f"class {node_class}")
        if class_start == -1:
            print(f"‚ùå –ö–ª–∞—Å—Å {node_class} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_passed = False
            continue
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –∫–ª–∞—Å—Å–∞ (–Ω–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–ª–∞—Å—Å–∞ –∏–ª–∏ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞)
        next_class_start = content.find("class ", class_start + 1)
        if next_class_start == -1:
            class_content = content[class_start:]
        else:
            class_content = content[class_start:next_class_start]
        
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ set_parameter –≤—ã–∑–æ–≤–æ–≤
        param_count = class_content.count("self.set_parameter(")
        
        print(f"üìä {node_class:20} : {param_count:2d} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", end="")
        
        if param_count >= 15:
            print(" ‚úÖ")
        else:
            print(" ‚ùå (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 15)")
            all_passed = False
    
    print("=" * 60)
    if all_passed:
        print("‚úÖ –í—Å–µ —É–∑–ª—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤!")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —É–∑–ª—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    
    return all_passed


def check_config_fixes():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    print("=" * 60)
    
    runner_file = Path("runner.py")
    if not runner_file.exists():
        print("‚ùå –§–∞–π–ª runner.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open(runner_file, 'r') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    fixes = [
        ("telegram token", '"token": "dummy_token"'),
        ("telegram chat_id", '"chat_id": "dummy_chat_id"'),
        ("api_server listen_ip", '"listen_ip_address": "127.0.0.1"'),
        ("api_server port", '"listen_port": 8080'),
        ("api_server username", '"username": "dummy_user"'),
        ("api_server password", '"password": "dummy_password"')
    ]
    
    all_fixed = True
    for fix_name, fix_text in fixes:
        if fix_text in content:
            print(f"‚úÖ {fix_name:20} - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            print(f"‚ùå {fix_name:20} - –ù–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ")
            all_fixed = False
    
    print("=" * 60)
    if all_fixed:
        print("‚úÖ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    return all_fixed


def check_strategy_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    print("\nüìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")
    print("=" * 60)
    
    strategy_files = [
        "user_data/strategies/GeneratedStrategy.py",
        "user_data/strategies/WorkingStrategy.py"
    ]
    
    valid_strategies = 0
    for strategy_file in strategy_files:
        strategy_path = Path(strategy_file)
        if strategy_path.exists():
            try:
                with open(strategy_path, 'r') as f:
                    content = f.read()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                required = [
                    "class",
                    "IStrategy",
                    "populate_indicators",
                    "populate_entry_trend", 
                    "populate_exit_trend"
                ]
                
                missing = []
                for req in required:
                    if req not in content:
                        missing.append(req)
                
                if not missing:
                    print(f"‚úÖ {strategy_file:40} - –≤–∞–ª–∏–¥–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞")
                    valid_strategies += 1
                else:
                    print(f"‚ùå {strategy_file:40} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {', '.join(missing)}")
                    
            except Exception as e:
                print(f"‚ùå {strategy_file:40} - –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
        else:
            print(f"‚ö†Ô∏è  {strategy_file:40} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print("=" * 60)
    print(f"üìä –í–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {valid_strategies}/{len(strategy_files)}")
    
    return valid_strategies > 0


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ RDP —Å–∏—Å—Ç–µ–º—ã")
    print("üéØ –¶–µ–ª—å: —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
    print("\n")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    params_ok = check_node_parameters()
    config_ok = check_config_fixes()
    strategies_ok = check_strategy_files()
    
    print("\n" + "=" * 60)
    print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∑–ª–æ–≤:     {'‚úÖ OK' if params_ok else '‚ùå FAIL'}")
    print(f"   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:        {'‚úÖ OK' if config_ok else '‚ùå FAIL'}")
    print(f"   –§–∞–π–ª—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:     {'‚úÖ OK' if strategies_ok else '‚ùå FAIL'}")
    
    if params_ok and config_ok and strategies_ok:
        print("\nüéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –£–°–ü–ï–®–ù–û –ü–†–ò–ú–ï–ù–ï–ù–´!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("‚úÖ –£–∑–ª—ã –∏–º–µ—é—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (15+ –∫–∞–∂–¥—ã–π)")
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—ç–∫—Ç–µ—Å—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        print("‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–º–µ—é—Ç –≤–∞–ª–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
        return True
    else:
        print("\n‚ö†Ô∏è  –¢–†–ï–ë–£–Æ–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 