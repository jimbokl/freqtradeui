#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –±—ç–∫—Ç–µ—Å—Ç–æ–º
"""

import sys
import os
import json
import subprocess
import tempfile
from pathlib import Path
import pandas as pd

def test_freqtrade_installation():
    """–¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ freqtrade"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Freqtrade...")
    try:
        result = subprocess.run(['freqtrade', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Freqtrade —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:")
            print(result.stdout)
            return True
        else:
            print("‚ùå Freqtrade –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:")
            print(result.stderr)
            return False
    except FileNotFoundError:
        print("‚ùå Freqtrade –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def test_data_availability():
    """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    data_dir = Path("user_data/data/binance")
    
    if not data_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return False
    
    data_files = list(data_dir.glob("*.feather"))
    if not data_files:
        print("‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö (.feather)")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {len(data_files)}")
    for file in data_files:
        print(f"  - {file.name}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        try:
            df = pd.read_feather(file)
            print(f"    –°—Ç—Ä–æ–∫: {len(df)}, –ü–µ—Ä–∏–æ–¥: {df.index[0]} - {df.index[-1]}")
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
    
    return True

def test_strategy_syntax():
    """–¢–µ—Å—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
    strategy_file = Path("user_data/strategies/GeneratedStrategy.py")
    
    if not strategy_file.exists():
        print("‚ùå –§–∞–π–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Python
        with open(strategy_file, 'r') as f:
            code = f.read()
        
        compile(code, strategy_file, 'exec')
        print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –∏–º–ø–æ—Ä—Ç
        sys.path.insert(0, str(strategy_file.parent))
        from GeneratedStrategy import GeneratedStrategy
        strategy = GeneratedStrategy()
        print("‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        
        return True
    except SyntaxError as e:
        print(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_config_validity():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    config_file = Path("user_data/config.json")
    
    if not config_file.exists():
        print("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        with open(config_file, 'r') as f:
            config = json.load(f)
        
        print("‚úÖ JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['stake_currency', 'exchange', 'timeframe']
        missing_fields = [field for field in required_fields if field not in config]
        
        if missing_fields:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}")
            return False
        
        print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return True
        
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ JSON: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def create_minimal_test_config():
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    config = {
        "max_open_trades": 1,
        "stake_currency": "USDT",
        "stake_amount": 100,
        "dry_run": True,
        "timeframe": "1h",
        "exchange": {
            "name": "binance",
            "pair_whitelist": ["BTC/USDT"],
            "ccxt_config": {},
            "ccxt_async_config": {}
        },
        "pairlists": [{"method": "StaticPairList"}],
        "entry_pricing": {
            "price_side": "same",
            "use_order_book": True,
            "order_book_top": 1
        },
        "exit_pricing": {
            "price_side": "same", 
            "use_order_book": True,
            "order_book_top": 1
        }
    }
    
    test_config_file = Path("test_config.json")
    with open(test_config_file, 'w') as f:
        json.dump(config, f, indent=2)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {test_config_file}")
    return test_config_file

def test_minimal_backtest():
    """–¢–µ—Å—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_file = create_minimal_test_config()
    
    try:
        cmd = [
            'freqtrade', 'backtesting',
            '--config', str(config_file),
            '--strategy', 'GeneratedStrategy',
            '--user-data-dir', 'user_data',
            '--timerange', '20250410-20250420',  # –ü–µ—Ä–∏–æ–¥, –∫–æ–≥–¥–∞ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
            '--cache', 'none'
        ]
        
        print(f"–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: {' '.join(cmd)}")
        
        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=60,  # 1 –º–∏–Ω—É—Ç–∞ timeout
            cwd=str(Path.cwd())
        )
        
        if result.returncode == 0:
            print("‚úÖ –ë—ç–∫—Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            print("–†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(result.stdout[-1000:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤
            return True
        else:
            print("‚ùå –ë—ç–∫—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:")
            print("STDOUT:", result.stdout[-1000:])
            print("STDERR:", result.stderr[-1000:])
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå –ë—ç–∫—Ç–µ—Å—Ç –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        return False
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        if config_file.exists():
            config_file.unlink()

def test_data_download():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
    
    config_file = create_minimal_test_config()
    
    try:
        cmd = [
            'freqtrade', 'download-data',
            '--config', str(config_file),
            '--pairs', 'BTC/USDT',
            '--timeframe', '1h',
            '--days', '7',
            '--exchange', 'binance'
        ]
        
        print(f"–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: {' '.join(cmd)}")
        
        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=120,  # 2 –º–∏–Ω—É—Ç—ã timeout
            cwd=str(Path.cwd())
        )
        
        if result.returncode == 0:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:")
            print("STDERR:", result.stderr)
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    finally:
        if config_file.exists():
            config_file.unlink()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –±—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n")
    
    tests = [
        ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Freqtrade", test_freqtrade_installation),
        ("–ù–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö", test_data_availability),
        ("–°–∏–Ω—Ç–∞–∫—Å–∏—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", test_strategy_syntax),
        ("–í–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", test_config_validity),
        ("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö", test_data_download),
        ("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç", test_minimal_backtest),
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        try:
            results[test_name] = test_func()
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("="*50)
    
    passed = sum(results.values())
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{test_name:<25} {status}")
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print("‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.")
    
    return passed == total

if __name__ == "__main__":
    main() 